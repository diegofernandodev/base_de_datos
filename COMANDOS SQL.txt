
COMANDOS SQL

PARA INGRESAR A MYSQL XAMPP

C/xampp/mysql/bin
mysql -u root -h localhost -p

++++++++++++++++++++++++++++++++++++++++++++++++DDL (Data Definition Language)+++++++++++++++++++++++++++++

----------------------------------------------CONSULTAR LISTADO DE BASES DE DATOS
SHOW DATABASES;

----------------------------------------------CREAR UNA TABLA

CREATE TABLE nombre_tabla (
    columna1 tipo_dato,
    columna2 tipo_dato,
    ...
    CONSTRAINT nombre_restriccion PRIMARY KEY (columna1)
);

----------------------------------------------CONSULTAR LISTADO DE TABLAS DENTRO DE UNA BASE DE DATOS
SHOW TABLES;

----------------------------------------------MODIFICAR UNA TABLAS(AGREGAR COLUMNAS)

ALTER TABLE nombre_tabla
ADD columna_nueva tipo_dato;

----------------------------------------------MODIFICAR UNA TABLAS(ELIMINAR COLUMNAS)

ALTER TABLE nombre_tabla
DROP COLUMN columna_a_eliminar;

----------------------------------------------MODIFICAR COLUMNAS DE UNA TABLA 

ALTER TABLE nombre_tabla
MODIFY COLUMN nombre_columna VARCHAR(100);

Si la columna contiene valores numéricos que deseas convertir en cadenas, puedes ejecutar una actualización para realizar la conversión. Por ejemplo:
UPDATE nombre_tabla
SET nombre_columna = CAST(nombre_columna AS VARCHAR(100));

---------------------------------------------MODIFICAR EL NOMBRE DE UNA TABLA

ALTER TABLE nombre_tabla RENAME TO nuevo_nombre_tabla;


---------------------------------------------MODIFICAR EL CAMPO DE UNA TABLA(COLUMNAS)

ALTER TABLE nombre_tabla CHANGE nombre_columna nuevo_nombre_columna tipo_de_dato;

hacer varios cambios a la vez:
ALTER TABLE empleados
CHANGE nombre nombre_completo VARCHAR(100),
CHANGE apellido apellido_materno VARCHAR(100),
CHANGE telefono num_telefono VARCHAR(20);


----------------------------------------------AND Y OR EN CONDICIONES WHERE(SELECT, UPDATE, DELETE)

SELECT * FROM personas
WHERE nombre = 'Juan' AND edad > 25;

SELECT * FROM personas
WHERE nombre = 'Juan' OR edad > 25;


----------------------------------------------ELIMINAR UNA TABLA

DROP TABLE nombre_tabla;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++DML (Data Manipulation Language)+++++++++++++++++++++++++++

---------------------------------------------INSERTAR DATOS EN UNA TABLA

INSERT INTO nombre_tabla (columna1, columna2, ...)
VALUES (valor1, valor2, ...);

---------------------------------------------ACTUALIZAR DATOS EN UNA TABLA

UPDATE nombre_tabla
SET columna = nuevo_valor
WHERE condicion;

---------------------------------------------ELIMINAR DATOS DE UNA TABLA

DELETE FROM nombre_tabla
WHERE condicion;

---------------------------------------------CONSULTAR DATOS DE UNA TABLA

SELECT columna1, columna2, ...
FROM nombre_tabla
WHERE condicion;

---------------------------------------------CONSULTA AVANZADA CON ORDENAMIENTO Y LIMITACION

SELECT columna1, columna2, ...
FROM nombre_tabla
WHERE condicion
ORDER BY columna1 ASC
LIMIT cantidad;

---------------------------------------------CONSULTA CON FUNCIONES DE AGRAGACION(EJEM: SUMA)

SELECT SUM(columna) AS suma_total
FROM nombre_tabla;

---------------------------------------------CONSULTA LLAVE FORANEA UNIDA CON LLAVE PRIMARIA.
 select U.nombre, R.nombre from usuario as U, roles as R where U.Id_rol_Fk = R.Id_rol;
SELECT E.nit, E.nombre, E.telefono, P.nombre, P.descripcion, P.marca, P.precio
FROM empresas AS E
INNER JOIN productos AS P ON E.Id_producto_fk = P.Id_producto; ------------> se utiliza inner join para consultas fk (no where)


---------------------------------------------CONSULTA UTILIZANDO ALIAS

select U.Id_usuario,U.nombre, U.telefono, U.direccion, U.email, U.Id_rol_Fk,R.Id_rol, R.nombre from usuario as U, roles as R;

---------------------------------------------DISTINCT

SELECT DISTINCT departamento
FROM empleados;

La cláusula DISTINCT se utiliza para eliminar duplicados en los resultados de una consulta.

---------------------------------------------BETWEEN

SELECT columnas
FROM tabla
WHERE columna BETWEEN valor_minimo AND valor_maximo;

La cláusula BETWEEN se utiliza en SQL para verificar si un valor se encuentra dentro de un rango específico. Puedes usarlo en condiciones de búsqueda para seleccionar registros que cumplan con ciertos criterios de rango.

---------------------------------------------ORDER BY

SELECT nombre, apellido
FROM empleados
ORDER BY apellido ASC, nombre ASC;

La cláusula ORDER BY se utiliza en SQL para ordenar los resultados de una consulta en función de una o más columnas. Puedes ordenar los resultados en orden ascendente (de menor a mayor) o descendente (de mayor a menor) según los valores de las columnas especificadas.

---------------------------------------------COUNT - SUM - GROUP BY

select count(nombre) as valor, nombre from usuario group by nombre;
select SUM(precio) as suma from productos group by (precio);

La función de agregación COUNT() en SQL se utiliza para contar el número de filas en un conjunto de resultados que cumple con ciertos criterios. Puedes usar COUNT() para determinar cuántos registros hay en una tabla que coinciden con una condición específica.

SELECT COUNT(columna)
FROM tabla
WHERE condicion;

SELECT COUNT(*)
FROM empleados
WHERE salario > 50000;

La cláusula GROUP BY se utiliza en SQL para agrupar filas en base a los valores de una o más columnas y aplicar funciones de agregación, como SUM, COUNT, AVG, etc., a cada grupo resultante. Esta cláusula es útil cuando deseas realizar cálculos sobre grupos de registros que comparten un valor común en una columna.

SELECT columna1, columna2, ..., función_agregación(columna)
FROM tabla
GROUP BY columna1, columna2, ...;


---------------------------------------------LIKE

select nombre from usuario where nombre like "maria";--> "m" --> "s" "%m"=temrinan en m --> "m%"= comienza en m --> "%m%"=empieza y termina en m

consultar el usi del IN y el HAVING
